// remarkPlugins={[remarkGfm]}
          // components={{
          //   code({ node, inline, className, children, ...props }) {
          //     if (!inline) {
          // // Render code blocks as plain text
          // return (
          //   <pre className="bg-gray-50 p-4 rounded text-sm overflow-x-auto">
          //     <code {...props}>{String(children)}</code>
          //   </pre>
          // );
          //     }

          //     // Render inline code as plain text
          //     return (
          // <code
          //   className="bg-gray-50 px-1 py-0.5 rounded text-sm font-mono"
          //   {...props}
          // >
          //   {children}
          // </code>
          //     );
          //   },
          //   // Ensure links open in new tab
          //   a: ({ node, ...props }) => (
          //     <a
          // {...props}
          // target="_blank"
          // rel="noopener noreferrer"
          // className="text-blue-600 hover:underline"
          //     />
          //   ),
          //   // Style lists properly
          //   ul: ({ node, ...props }) => (
          //     <ul className="list-disc pl-6 my-2" {...props} />
          //   ),
          //   ol: ({ node, ...props }) => (
          //     <ol className="list-decimal pl-6 my-2" {...props} />
          //   ),
          //   // Proper heading styles
          //   h1: ({ node, ...props }) => (
          //     <h1 className="text-xl font-bold mt-6 mb-2" {...props} />
          //   ),
          //   h2: ({ node, ...props }) => (
          //     <h2 className="text-lg font-bold mt-5 mb-2" {...props} />
          //   ),
          //   h3: ({ node, ...props }) => (
          //     <h3 className="text-base font-bold mt-4 mb-2" {...props} />
          //   ),
          //   // Fix paragraph component to prevent invalid nesting
          //   p: ({ node, children, ...props }) => {
          //     const childrenArray = Array.isArray(children) ? children : [children];
          //     const containsOnlyCodeBlock = childrenArray.some(
          // (child) =>
          //   typeof child === "object" &&
          //   child !== null &&
          //   "type" in child &&
          //   (child.type === "pre" ||
          //     (child.props &&
          //       child.props.node &&
          //       child.props.node.tagName === "pre"))
          //     );

          //     if (containsOnlyCodeBlock) {
          // return <>{children}</>;
          //     }

          //     return <p className=" " {...props}>{children}</p>;
          //   },
          //   // Handle pre elements directly to avoid nesting issues
          //   pre: ({ node, ...props }) => {
          //     return <div className="not-prose" {...props}>{props.children}</div>;
          //   },
          //   // Style blockquotes
          //   blockquote: ({ node, ...props }) => (
          //     <blockquote
          // className="border-l-4 border-gray-200 pl-4 italic my-2"
          // {...props}
          //     />
          //   ),
          // }}